// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_conviction_voting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm6`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=pallet_conviction_voting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_conviction_voting`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInfo<T> {
	// Storage: Referenda ReferendumInfoFor (r:1 w:1)
	// Storage: ConvictionVoting VotingFor (r:1 w:1)
	// Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn vote_new() -> Weight {
		Weight::from_ref_time(132_388_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Referenda ReferendumInfoFor (r:1 w:1)
	// Storage: ConvictionVoting VotingFor (r:1 w:1)
	// Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn vote_existing() -> Weight {
		Weight::from_ref_time(159_199_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ConvictionVoting VotingFor (r:1 w:1)
	// Storage: Referenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn remove_vote() -> Weight {
		Weight::from_ref_time(135_307_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ConvictionVoting VotingFor (r:1 w:1)
	// Storage: Referenda ReferendumInfoFor (r:1 w:0)
	fn remove_other_vote() -> Weight {
		Weight::from_ref_time(73_188_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ConvictionVoting VotingFor (r:2 w:2)
	// Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Referenda ReferendumInfoFor (r:10 w:10)
	// Storage: Scheduler Agenda (r:2 w:2)
	/// The range of component `r` is `[0, 512]`.
	fn delegate(r: u32, ) -> Weight {
		Weight::from_ref_time(80_027_000 as u64)
			// Standard Error: 56_286
			.saturating_add(Weight::from_ref_time(30_535_452 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
	}
	// Storage: ConvictionVoting VotingFor (r:2 w:2)
	// Storage: Referenda ReferendumInfoFor (r:10 w:10)
	// Storage: Scheduler Agenda (r:2 w:2)
	/// The range of component `r` is `[0, 512]`.
	fn undelegate(r: u32, ) -> Weight {
		Weight::from_ref_time(57_179_000 as u64)
			// Standard Error: 56_075
			.saturating_add(Weight::from_ref_time(30_490_043 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
	}
	// Storage: ConvictionVoting VotingFor (r:1 w:1)
	// Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn unlock() -> Weight {
		Weight::from_ref_time(91_110_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
